# Using CDFt packages
library("CDFt")

# Using two samples test packages
library("twosamples")

# Using packages for reading arguments
library("optparse")
 
# Bootstrap
nboots <- as.integer(1000)
usedalpha <- 0.05

# Option list
option_list = list(
    make_option(c("-o", "--observation"), type="character", default=NULL, help="Observation (reference) data file", metavar="character"),
    make_option(c("-m", "--modeloutput"), type="character", default=NULL, help="Simulation from WRF model (normally historical period)", metavar="character"),
    make_option(c("-v", "--validation"), type="character", default=NULL, help="Few statistical validations, e.g., CramerVonMises, KolmogorovSmirnov", metavar="character")
); 
 
# Function for applying CDFt
f_cdft <- function (O, Gp, Gf) {
  # Use the CDFt method
  CT <- CDFt(O,Gp,Gf)
  ds <- CT$DS
  # 
  return(ds)
}

# Function for "Singularity Stochastic Removal" (SSR)
ssr <- function (t, th) {
  # Over careful guy !
  t_new <- t
  # A random variable distributed uniformly between 0 and th
  # "runif() will not generate either of the extreme values 
  # unless max = min or max-min is small compared to min !
  z <- runif(length(t_new), min=0, max=th)
  # Replacing
  id <- t_new == 0 & !is.na(t_new)
  t_new[id] <- z[id]
  #
  return(t_new)
}

# Function for CvM and K-S test
two_sample_test <- function(a,b,alpha) {
  # Use "twosamples" package
  cvm_t <- cvm_test(a,b)
  ks_t <- ks_test(a,b)
  # Get p-value
  cvm <- if (cvm_t[2] > alpha) 1 else 0
  ks <- if (ks_t[2] > alpha) 1 else 0
  # Get it !
  return(c(cvm,ks))
}

# Read arguments 
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);

if (is.null(opt$observation)){
  print_help(opt_parser)
  stop("At least one argument must be supplied (input file).n", call.=FALSE)
}

# Read station data
obs <- read.csv(file = opt$observation)

# Read model output
mod <- read.csv(file = opt$modeloutput)

# Saving some statistics test
statout <- data.frame(matrix(ncol=4, nrow=0))
# Compare bootstrap p-value with the rejection threshold and, save only:
#  1 : it passed the test (p-value > alpha) : samples may be from same distribution
#  0 : null rejected 
#tmp <- c('CVM_passcode','KS_passcode')
# With bootstrap (e.g., 1000 times), it's about how many time it passed
#tmp <- c('CVM_percent','KS_percent')
# I need Before and After
tmp <- c('CVM_before','CVM_after','KS_before','KS_after')
colnames(statout) <- tmp

# First columns is "Time"
for ( i in colnames(obs)[2:length(colnames(obs))]) {

  # Get one series each time
  O <- as.numeric(obs[,i])
  Gp <- as.numeric(mod[,i])

  # 2/3 rule: 2/3 first for calibration and 1/3 last for validation
  n <- length(Gp)
  l <- as.integer(2/3*n)

  # Bootstrap for bias-correction steps

  cvm_pass_after = 0. # or OL
  ks_pass_after = 0.

  cvm_pass_before = 0.
  ks_pass_before = 0.

  for ( j in seq_len(nboots)){

    # 75 % of data
    Gp_cal <- sample(Gp[1:l], as.integer(0.75*l))
    Gp_val <- sample(Gp[(l+1):n], as.integer(0.75*(n-l)))

    O_cal <- sample(O[1:l], as.integer(0.75*l))
    O_val <- sample(O[(l+1):n], as.integer(0.75*(n-l)))

    # Determine a positive precipitation threshold th
    th <- min(O_cal[O_cal>0], Gp_cal[Gp_cal>0], Gp_val[Gp_val>0], na.rm=TRUE)
  
    # Singularity Stochastic Removal
    O_ssr <- ssr(O_cal,th)
    Gp_ssr <- ssr(Gp_cal,th)
    Gf_ssr <- ssr(Gp_val,th)
  
    # Now use CDFt function
    bc <- f_cdft(O_ssr, Gp_ssr, Gf_ssr)
  
    # Bias-corrected data lower than th are set to 0
    bc[bc < th] <- 0
  
    # Now, do K-S and CvM tests
    after <- two_sample_test(bc,O_val,usedalpha)

    # Counting results after bias correction
    cvm_pass_after <- cvm_pass_after + after[1]
    ks_pass_after <- ks_pass_after + after[2]

    # And before bias correction 
    before <- two_sample_test(Gp_val,O_val,usedalpha)

    cvm_pass_before <- cvm_pass_before + before[1]
    ks_pass_before <- ks_pass_before + before[2]

  }

  # Percentage of null not rejected
  cvm_after <- cvm_pass_after/nboots
  ks_after <- ks_pass_after/nboots

  cvm_before <- cvm_pass_before/nboots
  ks_before <- ks_pass_before/nboots
  
  statout[nrow(statout) + 1, ] <- c(cvm_before,cvm_after,ks_before,ks_after)
}

# Write output
write.csv(statout,file = opt$validation, row.names=FALSE)
