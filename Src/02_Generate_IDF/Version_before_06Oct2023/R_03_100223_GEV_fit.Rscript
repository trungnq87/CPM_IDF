# Use extRemes package
library("extRemes")

# Using packages for reading arguments
library("optparse")
 
option_list = list(
    make_option(c("-i", "--inputdata"), type="character", default=NULL, help="Input data file", metavar="character"),
    make_option(c("-g", "--gevfile"), type="character", default=NULL, help="Output file:  GEV fitting", metavar="character"),
    make_option(c("-o", "--idffile"), type="character", default=NULL, help="Output file:  IDF curves", metavar="character"),
    make_option(c("-a", "--alpha"), type="double", default=NULL, help="Alpha for likelihood ratio test"),
    make_option(c("-t", "--tail"), type="double", default=NULL, help="Alpha for confidence interval"),
    make_option(c("-b", "--nbootstrap"), type="integer", default=NULL, help="Number of bootstrap sample"),
    make_option(c("-d", "--durationinmin"), type="character", default=NULL, help="Duration in mins (well!)"),
    make_option(c("-f", "--frequency"), type="character", default=NULL, help="Rainfall frequency that you want to fitting GEV", metavar="character")
); 

# Read arguments 
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);

if (is.null(opt$inputdata)){
  print_help(opt_parser)
  stop("At least one argument must be supplied (input file).n", call.=FALSE)
}

# Read data
raw <- read.csv(opt$inputdata, header=TRUE)

# Choose alpha for likelihood ratio test
alpha <- opt$alpha

# Choose alpha for CI
tail <- opt$tail

# Choose number of bootstrapping time
nboot <- opt$nbootstrap

# Frequency that you want to test
ff <- opt$frequency
freq <- as.numeric(unlist(strsplit(ff, ",")))

# Durations in mins (as needed for IDF fixing step)
dd <- opt$durationinmin
duration <- as.numeric(unlist(strsplit(dd, ",")))

# Function for ERL and its CI for non-stationary case
cal_rl_non <- function (fit, yr, fq, nr, p) {
  #
  tmp <- erlevd(fit, period=fq)
  # Currently, the ci function does not work for effective
  # return levels. There were coding issues encountered.
  # But, could try:
  #
  z <- rextRemes(fit, n=nr)
  # "nr" (e.g., 1000) randomly drawn samples from the
  # fitted model. Each row is a sample
  # of data from the fitted model of the
  # same length as the data. Each column
  # is a separate sample.
  sam <- numeric(0)
  for( i in 1:nr) {
    dat <- data.frame(z=z[,i], annee=yr)
    res <- fevd(z, dat, location.fun=~annee, method="GMLE")
    sam <- cbind(sam, c(erlevd(res)))
  }
  #
  res <- apply(sam, 1, quantile, probs=c(p/2, 1 - p/2))
  # If you need "names", uncomment this line
  #nm <- rownames(res)
  res <- cbind(res[1,], tmp, res[2,])
  # Skip column names
  #colnames(res) <- c(nm[1], "Estimated eff. ret. level", nm[2])
  # ATTENTION: the last row idea !!! Hum,...
  return(as.numeric(tail(res, n=1)))
}

# Function for ERL and its CI for stationary case
cal_rl <- function (fit, yr, fq, nr, p) {
  #
  tmp <- erlevd(fit, period=fq)
  #
  sam <- numeric(0)
  for( i in 1:nr) {
    a <- rextRemes(fit, n=length(yr))
    dat <- data.frame(z=a)
    res <- fevd(z, dat, method="GMLE")
    sam <- cbind(sam, c(erlevd(res, period=fq)))
  }
  #
  res <- apply(sam, 1, quantile, probs=c(p/2, 1 - p/2))
  # If you need "names"
  #nm <- rownames(res)
  res <- cbind(res[1,], tmp, res[2,])
  # Skip column names
  #colnames(res) <- c(nm[1], "Estimated eff. ret. level", nm[2])
  # ATTENTION: the last row idea !!! Hum,...
  return(as.numeric(tail(res, n=1)))
}

# Two types of output files
# 1st : saving non-stationary flag, return levels and its low/high range
out01 <- data.frame(matrix(ncol=4, nrow=0))
tmp <- c('Non-stationary flag','Low','ERL','High')
colnames(out01) <- tmp

# 2st : idf output for non-consistent IDF adjustments
out02 <- data.frame(matrix(ncol=4, nrow=0))
tmp <- c('','ret.periods','durations','ret.levels')
colnames(out02) <- tmp

# Drop NaN values
# You can try to not drop NaN for all columns
# But let keep it "synchronized" first
df <- na.omit(raw)
yr <- as.numeric(df[,"Year"])

# I should learn R better to avoid this kind of command lines
count <- 0

# Loops for all frequencies and durations
for ( j in freq ) {

  ii <- 0

  # First columns of df is "Year"
  for ( i in colnames(df)[2:length(colnames(df))]) {
  
    # Counting
    count <- count + 1 
    ii <- ii + 1

    # Get one series to test
    a <- as.numeric(df[,i])
    
    # Fit stationary GEV
    fit1 <- fevd(a, method="GMLE")
    
    # Fit non-stationary GEV (co-variate with ~Year)
    fit2 <- fevd(a, location.fun=~yr, method="GMLE")
    
    # Likelihood ratio test
    ## Get only p-value (still story of CI, but later)
    p = lr.test(fit1,fit2)$p.value
    
    flag=0
    # Now you know which one is more suitable
    if ( p < alpha ) {
      flag='Y'
      rl <- cal_rl_non(fit2, yr, j, nboot, alpha)
    } else {
      flag='N'
      rl <- cal_rl(fit1, yr, j, nboot, alpha)
    }
  
    # Save array to write output later
    out01[nrow(out01) + 1, ] <- c(flag,rl)
    out02[nrow(out02) + 1, ] <- c(count,j,duration[ii],rl[2])
 }
}

# Write output
write.csv(out01,file = opt$gevfile, row.names=FALSE)
write.csv(out02,file = opt$idffile, row.names=FALSE)
